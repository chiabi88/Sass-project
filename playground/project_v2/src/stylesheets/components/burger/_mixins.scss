/// burger-menu 생성 믹스인
/// @group [component] burger
/// @link http://callmenick.com/post/animating-css-only-hamburger-menu-icons
/// @param {Number (width unit)} $burger-width [60px] - 햄버거 메뉴 넓이
/// @param {Number (width unit)} $burger-height [60px] - 햄버거 메뉴 높이
/// @param {Number (width unit)} $burger-side [10px] - 햄버거 메뉴 양쪽 여백
/// @param {Number (width unit)} $burger-gutter [3px] - 햄버거 메뉴 라인 간 간격
/// @param {Number (width unit)} $burger-thickness [2px] - 햄버거 메뉴 라인 굵기
/// @param {Color} $burger-color [rgb(0,0,0)] - 햄버거 메뉴 라인 컬러
/// @param {Number (time, width unit)} $burger-transition-duration [null] - 햄버거 메뉴 트랜지션 속도
/// @param {Number (width unit)} $burger-border-radius [null] - 햄버거 메뉴 라인 가장자리
@mixin burger-menu(
  $burger-width: 60px, 
  $burger-height: 60px, 
  $burger-side: 10px, 
  $burger-gutter: 3px, 
  $burger-thickness: 2px, 
  $burger-color: rgb(0,0,0), 
  $burger-transition-duration: null, 
  $burger-border-radius: null
  ) {
  // 다음 값의 단위는 모두 같아야합니다.
  @if unit($burger-height) == unit($burger-thickness) and unit($burger-thickness) == unit($burger-gutter) {
    $burger-width: $burger-width !global;
      $burger-height: $burger-height !global;
      $burger-side: $burger-side !global;
      $burger-thickness: $burger-thickness !global;

      position: relative;
      width: $burger-width;
      height: $burger-height;
      padding: 0;
      text-indent: -9999px;
      overflow: hidden;
      cursor: pointer;
      & > span {
        position: absolute;
        top: ($burger-height / 2) - ($burger-thickness / 2);
        left: $burger-side;
        right: $burger-side;
        @if $burger-transition-duration != null {
          transition-property: transform;
          transition-duration: $burger-transition-duration;
        }
        &,
        &::before,
        &::after {
          display: block;
          height: $burger-thickness;
          background-color: $burger-color;
          @if $burger-border-radius != null {
            border-radius: $burger-border-radius;
          }
        }
      }
      & > span::before,
      & > span::after {
        position: absolute;
        left: 0;
        width: 100%;
        content: '';
        @if $burger-transition-duration != null {
          transition-duration: $burger-transition-duration;
        }
      }
      & > span::before {
        top: -($burger-thickness + $burger-gutter);
        @if $burger-transition-duration != null {
          transition-property: top, background-color, transform;
        }
      }
      & > span::after {
        bottom: -($burger-thickness + $burger-gutter);
        @if $burger-transition-duration != null {
          transition-property: bottom, background-color, transform;
        }
      }
  } @else {
    @error 'The value into the burger-menu mixin must share the same unit type';
  }
 
}

/// burger-menu 크로스 효과 애니메이션 믹스인
/// @group [component] burger
/// @param {Color} $color [null] - 햄버거 메뉴 라인 컬러
@mixin burger-menu--cross($color: null) {
  & > span {
    transform: rotate(180deg);
    background-color: transparent;
    @if ($color != null) {
      &::before,
      &::after {
        background-color: $color;
      }
    }
    &::before {
      top: 0;
      transform: rotate(45deg);
    }
    &::after {
      bottom: 0;
      transform: rotate(-45deg) ;
    }
  }
}

/// burger-menu 마이너스 효과 애니메이션 믹스인
/// @group [component] burger
/// @param {Color} $color [null] - 햄버거 메뉴 라인 컬러
@mixin burger-menu--minus($color: null) {
  & > span {
    @if ($color != null) {
      &,
      &::before,
      &::after {
        background-color: $color;
      }
    }
    &::before {
      top: 0;
    }
    &::after {
      bottom: 0;
    }    
  }
}

/// burger-menu 화살표 효과 애니메이션 믹스인
/// @group [component] burger
/// @param {Color} $color [null] - 햄버거 메뉴 라인 컬러
@mixin burger-menu--arrow($color: null) {
  & > span {
    @if ($color != null) {
      &,
      &::before,
      &::after {
        background-color: $color;
      }
    }
    & {
      transform: rotate(180deg);
    }
    &::before {
      width: 50%;
      top: 0;
      transform-origin: top right;
      transform: translateX($burger-width/2 - $burger-side + $burger-thickness) translateY($burger-thickness/2) rotate(45deg);
    }
    &::after {
      width: 50%;
      bottom: 0;
      transform-origin: bottom right;
      transform: translateX($burger-width/2 - $burger-side + $burger-thickness) translateY(-($burger-thickness/2)) rotate(-45deg);
    }
  }
}