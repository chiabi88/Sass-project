/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/*
  Precomputed linear color channel values, for use in contrast calculations.
  See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests

  Algorithm, for c in 0 to 255:
  f(c) {
    c = c / 255;
    return c < 0.03928 ? c / 12.92 : Math.pow((c + 0.055) / 1.055, 2.4);
  }

  This lookup table is needed since there is no `pow` in SASS.
*/
/**
 * Calculate the luminance for a color.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Calculate the contrast ratio between two colors.
 * See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
 */
/**
 * Determine whether to use dark or light text on top of given color.
 * Returns "dark" for dark text and "light" for light text.
 */
/*
  Main theme colors.
  If you're a user customizing your color scheme in SASS, these are probably the only variables you need to change.
*/
/* Indigo 500 */
/* Pink A200 */
/* White */
/* Which set of text colors to use for each main theme color (light or dark) */
/* Text colors according to light vs dark and text type */
/* Primary text colors for each of the theme colors */
/**
 * Applies the correct theme color style to the specified property.
 * $property is typically color or background-color, but can be any CSS property that accepts color values.
 * $style should be one of the map keys in $mdc-theme-property-values (_variables.scss).
 */
/**
 * Creates a rule to be used in MDC-Web components for dark theming, and applies the provided contents.
 * Should provide the $root-selector option if applied to anything other than the root selector.
 * When used with a modifier class, provide a second argument of `true` for the $compound parameter
 * to specify that this should be attached as a compound class.
 *
 * Usage example:
 *
 * ```scss
 * .mdc-foo {
 *   color: black;
 *
 *   @include mdc-theme-dark {
 *     color: white;
 *   }
 *
 *   &__bar {
 *     background: black;
 *
 *     @include mdc-theme-dark(".mdc-foo") {
 *       background: white;
 *     }
 *   }
 * }
 *
 * .mdc-foo--disabled {
 *   opacity: .38;
 *
 *   @include mdc-theme-dark(".mdc-foo", true) {
 *     opacity: .5;
 *   }
 * }
 * ```
 */
/* TODO(sgomes): Figure out what to do about desktop font sizes. */
/* TODO(sgomes): Figure out what to do about i18n and i18n font sizes. */
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * Creates a rule that will be applied when an MDC-Web component is within the context of an RTL layout.
 *
 * Usage Example:
 * ```scss
 * .mdc-foo {
 *   position: absolute;
 *   left: 0;
 *
 *   @include mdc-rtl {
 *     left: auto;
 *     right: 0;
 *   }
 *
 *   &__bar {
 *     margin-left: 4px;
 *     @include mdc-rtl(".mdc-foo") {
 *       margin-left: auto;
 *       margin-right: 4px;
 *     }
 *   }
 * }
 *
 * .mdc-foo--mod {
 *   padding-left: 4px;
 *
 *   @include mdc-rtl {
 *     padding-left: auto;
 *     padding-right: 4px;
 *   }
 * }
 * ```
 *
 * Note that this works by checking for [dir="rtl"] on an ancestor element. While this will work
 * in most cases, it will in some cases lead to false negatives, e.g.
 *
 * ```html
 * <html dir="rtl">
 *   <!-- ... -->
 *   <div dir="ltr">
 *     <div class="mdc-foo">Styled incorrectly as RTL!</div>
 *   </div>
 * </html>
 * ```
 *
 * In the future, selectors such as :dir (http://mdn.io/:dir) will help us mitigate this.
 */
/**
 * Takes a base box-model property - e.g. margin / border / padding - along with a default
 * direction and value, and emits rules which apply the value to the
 * "<base-property>-<default-direction>" property by default, but flips the direction
 * when within an RTL context.
 *
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, left, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 8px;
 *     margin-left: 0;
 *   }
 * }
 * ```
 * whereas:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-box(margin, right, 8px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-right: 8px;
 *
 *   @include mdc-rtl {
 *     margin-right: 0;
 *     margin-left: 8px;
 *   }
 * }
 * ```
 *
 * You can also pass a 4th optional $root-selector argument which will be forwarded to `mdc-rtl`,
 * e.g. `@include mdc-rtl-reflexive-box-property(margin, left, 8px, ".mdc-component")`.
 *
 * Note that this function will always zero out the original value in an RTL context. If you're
 * trying to flip the values, use mdc-rtl-reflexive-property().
 */
/**
 * Takes a base property and emits rules that assign <base-property>-left to <left-value> and
 * <base-property>-right to <right-value> in a LTR context, and vice versa in a RTL context.
 * For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-property(margin, auto, 12px);
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 * .mdc-foo {
 *   margin-left: auto;
 *   margin-right: 12px;
 *
 *   @include mdc-rtl {
 *     margin-left: 12px;
 *     margin-right: auto;
 *   }
 * }
 * ```
 *
 * A 4th optional $root-selector argument can be given, which will be passed to `mdc-rtl`.
 */
/**
 * Takes an argument specifying a horizontal position property (either "left" or "right") as well
 * as a value, and applies that value to the specified position in a LTR context, and flips it in a
 * RTL context. For example:
 *
 * ```scss
 * .mdc-foo {
 *   @include mdc-rtl-reflexive-position(left, 0);
 *   position: absolute;
 * }
 * ```
 * is equivalent to:
 *
 * ```scss
 *  .mdc-foo {
 *    position: absolute;
 *    left: 0;
 *    right: initial;
 *
 *    @include mdc-rtl {
 *      right: 0;
 *      left: initial;
 *    }
 *  }
 * ```
 * An optional third $root-selector argument may also be given, which is passed to `mdc-rtl`.
 */
/**
 * Copyright 2016 Google Inc. All Rights Reserved.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *      http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
:root {
  --mdc-persistent-drawer-dark-theme-bg-color: #212121;
}

.mdc-persistent-drawer {
  /* Use aspect ratio trick to maintain 16:9 aspect ratio on the header */
  /* stylelint-disable selector-no-qualifying-type */
  /* stylelint-enable selector-no-qualifying-type */
  /* TODO(sgomes): Revisit when we have interactive lists. */
  width: 0;
}

.mdc-persistent-drawer__toolbar-spacer {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: relative;
  -webkit-box-orient: horizontal;
  -webkit-box-direction: normal;
      -ms-flex-direction: row;
          flex-direction: row;
  -ms-flex-negative: 0;
      flex-shrink: 0;
  -webkit-box-align: flex-center;
      -ms-flex-align: flex-center;
          align-items: flex-center;
  height: 56px;
  padding: 16px;
  border-bottom: 1px solid rgba(0, 0, 0, 0.12);
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  /* TODO(sgomes): replace with global breakpoints when we have them */
}

.mdc-persistent-drawer__toolbar-spacer--theme-dark .mdc-persistent-drawer__toolbar-spacer,
.mdc-theme--dark .mdc-persistent-drawer__toolbar-spacer {
  border-bottom: 1px solid rgba(255, 255, 255, 0.12);
}

@media (min-width: 600px) {
  .mdc-persistent-drawer__toolbar-spacer {
    height: 64px;
  }
}

.mdc-persistent-drawer__header {
  position: relative;
}

.mdc-persistent-drawer__header::before {
  display: block;
  padding-top: 56.25%;
  content: "";
}

.mdc-persistent-drawer__header-content {
  display: -webkit-box;
  display: -ms-flexbox;
  display: flex;
  position: absolute;
  top: 0;
  right: 0;
  bottom: 0;
  left: 0;
  -webkit-box-align: end;
      -ms-flex-align: end;
          align-items: flex-end;
  padding: 16px;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
}

.mdc-persistent-drawer .mdc-list-group,
.mdc-persistent-drawer .mdc-list {
  padding-right: 0;
  padding-left: 0;
}

.mdc-persistent-drawer .mdc-list-item {
  position: relative;
  padding: 0 16px;
  outline: none;
  color: inherit;
  text-decoration: none;
  font-family: Roboto, sans-serif;
  -moz-osx-font-smoothing: grayscale;
  -webkit-font-smoothing: antialiased;
  font-size: 0.875rem;
  font-weight: 500;
  letter-spacing: 0.04em;
  line-height: 1.5rem;
}

.mdc-persistent-drawer .mdc-list-item.mdc-ripple-upgraded {
  left: 0;
}

.mdc-persistent-drawer .mdc-list-item__start-detail {
  color: rgba(0, 0, 0, 0.54);
}

.mdc-persistent-drawer .mdc-list-item__start-detail--theme-dark .mdc-persistent-drawer .mdc-list-item__start-detail,
.mdc-theme--dark .mdc-persistent-drawer .mdc-list-item__start-detail {
  color: rgba(255, 255, 255, 0.54);
}

.mdc-persistent-drawer--selected.mdc-list-item,
.mdc-persistent-drawer--selected.mdc-list-item .mdc-list-item__start-detail {
  color: #3f51b5;
  color: var(--mdc-theme-primary, #3f51b5);
}

.mdc-persistent-drawer .mdc-list-item::before {
  position: absolute;
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  -webkit-transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 1, 1);
  transition: opacity 120ms 0ms cubic-bezier(0.4, 0, 1, 1);
  border-radius: inherit;
  background: currentColor;
  content: "";
  opacity: 0;
}

.mdc-persistent-drawer .mdc-list-item:focus::before {
  -webkit-transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: .12;
}

.mdc-persistent-drawer .mdc-list-item:active::before {
  /*
      Slightly darker value for visual distinction.
      This allows a full base that has distinct modes.
      Progressive enhancement with ripples will provide complete button spec alignment.
    */
  -webkit-transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: opacity 180ms 0ms cubic-bezier(0, 0, 0.2, 1);
  opacity: .18;
}

.mdc-persistent-drawer .mdc-list-item:active:focus::before {
  -webkit-transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
          transition-timing-function: cubic-bezier(0.4, 0, 0.2, 1);
}

.mdc-persistent-drawer__drawer {
  background: #fff;
  background: var(--mdc-theme-background, #fff);
  border-left: 0;
  border-right: 1px solid #e4e4e4;
  left: 0;
  right: initial;
  height: 100%;
  -webkit-transform: translateX(-107%);
          transform: translateX(-107%);
  -webkit-transform: translateX(calc(-100% - 20px));
          transform: translateX(calc(-100% - 20px));
  will-change: transform;
  display: -webkit-inline-box;
  display: -ms-inline-flexbox;
  display: inline-flex;
  -webkit-box-orient: vertical;
  -webkit-box-direction: normal;
      -ms-flex-direction: column;
          flex-direction: column;
  -webkit-box-sizing: border-box;
          box-sizing: border-box;
  width: 240px;
  overflow: hidden;
  -ms-touch-action: none;
      touch-action: none;
}

[dir="rtl"] .mdc-persistent-drawer__drawer, .mdc-persistent-drawer__drawer[dir="rtl"] {
  border-left: 1px solid #e4e4e4;
  border-right: 0;
}

[dir="rtl"] .mdc-persistent-drawer__drawer, .mdc-persistent-drawer__drawer[dir="rtl"] {
  left: initial;
  right: 0;
}

.mdc-persistent-drawer__drawer--theme-dark,
.mdc-theme--dark .mdc-persistent-drawer__drawer {
  background-color: #212121;
  background-color: var(--mdc-persistent-drawer-dark-theme-bg-color, #212121);
  color: white;
  color: var(--mdc-theme-text-primary-on-dark, white);
  border-left: 0;
  border-right: 1px solid rgba(255, 255, 255, 0.12);
}

[dir="rtl"] .mdc-persistent-drawer__drawer--theme-dark, .mdc-persistent-drawer__drawer--theme-dark[dir="rtl"], [dir="rtl"]
.mdc-theme--dark .mdc-persistent-drawer__drawer,
.mdc-theme--dark .mdc-persistent-drawer__drawer[dir="rtl"] {
  border-left: 1px solid rgba(255, 255, 255, 0.12);
  border-right: 0;
}

[dir="rtl"] .mdc-persistent-drawer .mdc-persistent-drawer__drawer,
.mdc-persistent-drawer[dir="rtl"] .mdc-persistent-drawer__drawer {
  -webkit-transform: translateX(107%);
          transform: translateX(107%);
  -webkit-transform: translateX(calc(100% + 20px));
          transform: translateX(calc(100% + 20px));
}

.mdc-persistent-drawer--animating .mdc-persistent-drawer__drawer {
  -webkit-transition: -webkit-transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: -webkit-transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.13s 0ms cubic-bezier(0, 0, 0.2, 1);
}

.mdc-persistent-drawer--animating.mdc-persistent-drawer--open .mdc-persistent-drawer__drawer {
  -webkit-transition: -webkit-transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: -webkit-transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1);
  transition: transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1), -webkit-transform 0.33s 0ms cubic-bezier(0, 0, 0.2, 1);
}

.mdc-persistent-drawer--open {
  width: 240px;
  pointer-events: auto;
}

.mdc-persistent-drawer--open .mdc-persistent-drawer__drawer {
  -webkit-transform: none;
          transform: none;
}

[dir="rtl"] .mdc-persistent-drawer--open .mdc-persistent-drawer__drawer, .mdc-persistent-drawer--open[dir="rtl"] .mdc-persistent-drawer__drawer {
  -webkit-transform: none;
          transform: none;
}
/*# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3Nhc3MvcnRsL19taXhpbnMuc2NzcyIsIi4uLy4uL3Nhc3MvdGhlbWUvX2NvbnN0YW50cy5zY3NzIiwiLi4vLi4vc2Fzcy90aGVtZS9fZnVuY3Rpb25zLnNjc3MiLCIuLi8uLi9zYXNzL3RoZW1lL192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL3Nhc3MvdGhlbWUvX21peGlucy5zY3NzIiwiLi4vLi4vc2Fzcy90eXBvZ3JhcGh5L192YXJpYWJsZXMuc2NzcyIsIi4uLy4uL3Nhc3Mvc2xpZGFibGUvX21peGlucy5zY3NzIiwiLi4vLi4vc2Fzcy9zbGlkYWJsZS9fdmFyaWFibGVzLnNjc3MiLCIuLi8uLi9zYXNzL21kYy1wZXJzaXN0ZW50LWRyYXdlci5zY3NzIiwiLi4vLi4vc2Fzcy9fbWl4aW5zLnNjc3MiLCIuLi8uLi9jc3MvbWRjLXBlcnNpc3RlbnQtZHJhd2VyLmNzcyIsIi4uLy4uL3Nhc3MvdHlwb2dyYXBoeS9fbWl4aW5zLnNjc3MiLCIuLi8uLi9zYXNzL2FuaW1hdGlvbi9fdmFyaWFibGVzLnNjc3MiXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IkFBZ0JBOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBOENHO0FBbUJIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQWtERztBQWlCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQXlCRztBQVFIOzs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztHQTBCRztBQy9MSDs7Ozs7Ozs7Ozs7RUFXRTtBQ1RGOzs7R0FHRztBQVNIOzs7R0FHRztBQVFIOzs7R0FHRztBQzFCSDs7O0VBR0U7QUFDb0MsZ0JBQWdCO0FBQ2pCLGVBQWU7QUFDZCxXQUFXO0FBRWpELCtFQUErRTtBQUsvRSwwREFBMEQ7QUFrQjFELHNEQUFzRDtBQy9CdEQ7Ozs7R0FJRztBQWlCSDs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7O0dBaUNH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 */